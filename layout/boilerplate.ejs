<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Store</title>
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link rel="icon" type="image/x-icon" href="/icons/icon-72x72.png">
    <link rel="stylesheet" href="/css/rating.css">
    <link href="https://api.mapbox.com/mapbox-gl-js/v3.3.0/mapbox-gl.css" rel="stylesheet">
    <script src="https://api.mapbox.com/mapbox-gl-js/v3.3.0/mapbox-gl.js"></script>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/css/bootstrap.min.css">
    <link rel="manifest" href="/js/manifest.json">
    <link rel="apple-touch-icon"
        href="https://res.cloudinary.com/dzrxswqur/image/upload/v1734930957/traiapan_logo_awgyzb.png">
    <meta name="apple-mobile-web-app-status-bar" content="FF4E50">
    <meta name="mobile-web-app-capable" content="yes">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: 'Roboto', sans-serif;
        }

        .header {
            background: linear-gradient(to right, #FF6F61, #6A0DAD);
            color: white;
            text-align: center;
            padding: 10px 0;
            border-radius: 0 0 10px 10px;
        }

        .header .card-title {
            font-size: 2.5rem;
            color: #ffffff;
            font-weight: 700;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.4);
            letter-spacing: 2px;
        }

        .search-bar {
            margin-top: 20px;
        }

        .search-bar .form-control {
            border-radius: 25px;
            padding: 10px 20px;
            border: 2px solid #fff;
        }

        .search-bar .btn {
            border-radius: 25px;
            padding: 10px 20px;
            margin-left: 10px;
            background-color: white;
            color: #6A0DAD;
            border: 2px solid #fff;
        }


        .navbar-nav {
            margin-top: 20px;
        }

        .spinner-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.8);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 1050;
            visibility: hidden;
            opacity: 0;
            transition: opacity 0.3s, visibility 0.3s;
        }

        .spinner-overlay.active {
            visibility: visible;
            opacity: 1;
        }

        .spinner-text {
            margin-top: 20px;
            font-size: 1.2rem;
            font-weight: 500;
            color: #6A0DAD;
        }

        .loader {
            position: relative;
            transform: rotateZ(45deg);
            perspective: 1000px;
            border-radius: 50%;
            width: 48px;
            height: 48px;
            color: #FF6F61;
        }

        .loader:before,
        .loader:after {
            content: '';
            display: block;
            position: absolute;
            top: 0;
            left: 0;
            width: inherit;
            height: inherit;
            border-radius: 50%;
            transform: rotateX(70deg);
            animation: 1s spin linear infinite;
        }

        .loader:after {
            color: #6A0DAD;
            transform: rotateY(70deg);
            animation-delay: 0.4s;
        }

        @keyframes spin {

            0%,
            100% {
                box-shadow: 0.2em 0px 0 0px currentcolor;
            }

            12% {
                box-shadow: 0.2em 0.2em 0 0 currentcolor;
            }

            25% {
                box-shadow: 0 0.2em 0 0 currentcolor;
            }

            37% {
                box-shadow: -0.2em 0.2em 0 0 currentcolor;
            }

            50% {
                box-shadow: -0.2em 0 0 0 currentcolor;
            }

            62% {
                box-shadow: -0.2em -0.2em 0 0 currentcolor;
            }

            75% {
                box-shadow: 0px -0.2em 0 0 currentcolor;
            }

            87% {
                box-shadow: 0.2em -0.2em 0 0 currentcolor;
            }
        }

        .voice-btn {
            background-color: white;
            color: #6A0DAD;
            font-size: 18px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 4px solid #fff;
        }

        .voice-btn i {
            background-color: white;
            color: #6A0DAD;
        }

        #suggestions {
            max-height: 200px;
            overflow-y: auto;
            width: 115%;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #fff;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            padding: 0;
        }

        #suggestions .list-group-item {
            cursor: pointer;
            padding: 10px 15px;
            text-align: left;
            font-size: 16px;
            color: #333;
            transition: background-color 0.2s, color 0.2s;
        }

        #suggestions .list-group-item:hover {
            background-color: #f9f9f9;
            color: #007bff;
        }

        #suggestions .list-group-item:not(:last-child) {
            border-bottom: 1px solid #eee;
        }

        .input-group {
            position: relative;
        }

        #suggestions {
            position: absolute;
            top: 100%;
            /* Positions below the input */
            left: 0;
        }

        .placeholder-container {
            position: relative;
            height: 1.5em;
            /* Adjust based on font size */
            overflow: hidden;
            display: flex;
            align-items: center;
        }

        .placeholder-text {
            position: absolute;
            opacity: 1;
            transform: translateY(0);
            transition: transform 0.5s ease, opacity 0.5s ease;
        }

        .placeholder-text.hidden {
            opacity: 0;
            transform: translateY(-100%);
        }
    </style>
</head>

<body>
    <!-- Fullscreen Spinner -->
    <div id="spinner-overlay" class="spinner-overlay">
        <div class="loader"></div>
    </div>

    <div class="header">
        <div class="text-center bg-transparent border-0">
            <div class="card-body">
                <h1 class="card-title" id="tripleTapHeading">अपना नगर</h1>
            </div>
        </div>
        <div class="navbar-nav ms-auto search-bar d-flex align-items-center flex-row">
            <form class="d-flex justify-content-center flex-grow-1" role="search" method="GET" action="/items/search">
                <div class="input-group cont">
                    <input id="search-input" class="form-control" name="keyword" type="search" placeholder="Pizza"
                        aria-label="Search" autocomplete="off">
                    <ul id="suggestions" class="list-group position-absolute mt-2"
                        style="z-index: 1000; display: none;"></ul>
                    <button type="button" class="voice-btn no-spinner" id="voice-btn">
                        <i class="fa-solid fa-microphone"></i>
                    </button>
                    <button type="submit" class="btn btn-search">
                        <i class="fa-solid fa-magnifying-glass"></i>
                    </button>
                </div>
            </form>
            <button class="navbar-toggler d-block" type="button" data-bs-toggle="offcanvas"
                data-bs-target="#offcanvasNavbar" aria-controls="offcanvasNavbar" aria-expanded="false"
                aria-label="Toggle navigation" style="margin-left: auto; font-size: xx-large;">
                <i class="fa-solid fa-circle-user"></i>
            </button>
        </div>
    </div>

    <%- include("../views/includes/navbar.ejs") %>
        <div class="container mt-1">
            <%- include("../views/includes/flash.ejs") %>
                <%- body %>
        </div>
        <%- include("../views/includes/cart.ejs") %>
            <% if(currUser && currUser.type && currUser.type==="Restaurant" ){%>
                <%- include("../views/includes/footerRes.ejs") %>
                    <%}else if(!currUser || (currUser && currUser.type && (currUser.type==="User" )) ){%>
                        <%- include("../views/includes/footer.ejs") %>
                            <%}else if(!currUser || (currUser && currUser.type && (currUser.type==="Owner" )) ){%>
                                <%- include("../views/includes/footerOwn.ejs") %>
                                    <% }else if(!currUser || (currUser && currUser.type &&
                                        (currUser.type==="Delivery Boy" )) ){ %>
                                        <%- include("../views/includes/footerEmp.ejs") %>
                                            <% } %>

                                                <script>
                                                    const spinnerOverlay = document.getElementById('spinner-overlay');
                                                    let spinnerTimeout;

                                                    // Show Spinner
                                                    function showSpinner() {
                                                        spinnerOverlay.classList.add('active');

                                                        // Ensure spinner hides after 30 seconds max
                                                        spinnerTimeout = setTimeout(hideSpinner, 30000);
                                                    }

                                                    // Hide Spinner
                                                    function hideSpinner() {
                                                        spinnerOverlay.classList.remove('active');
                                                        clearTimeout(spinnerTimeout);
                                                    }

                                                    // Example usage during an AJAX request or navigation
                                                    document.addEventListener('DOMContentLoaded', () => {
                                                        document.querySelectorAll('a, form').forEach(element => {
                                                            element.addEventListener('click', (event) => {
                                                                const target = event.target;

                                                                const tagName = target.tagName.toLowerCase();

                                                                // Avoid spinner for specific tags or elements with the 'no-spinner' class
                                                                if (
                                                                    !['input', 'select', 'textarea', 'p', 'h1', 'h2', 'h3', 'label'].includes(tagName) &&
                                                                    !target.classList.contains('no-spinner') &&
                                                                    !target.closest('.no-spinner')
                                                                ) {
                                                                    showSpinner();
                                                                }
                                                            });
                                                        });
                                                    });
                                                    // Check for SpeechRecognition API support
                                                    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

                                                    if (SpeechRecognition) {
                                                        const recognition = new SpeechRecognition();
                                                        recognition.continuous = false; // Recognizes a single phrase
                                                        recognition.lang = 'en-US'; // Language for speech recognition
                                                        recognition.interimResults = false; // Do not show interim results

                                                        const voiceBtn = document.getElementById('voice-btn');
                                                        const searchInput = document.getElementById('search-input');
                                                        const searchButton = document.querySelector('button[type="submit"]'); // Select the search button

                                                        // Start speech recognition on button click
                                                        voiceBtn.addEventListener('click', () => {
                                                            recognition.start();
                                                            voiceBtn.classList.add('active'); // Optional: Add a class to indicate active state
                                                        });

                                                        // Capture speech recognition result
                                                        recognition.addEventListener('result', (event) => {
                                                            const transcript = event.results[0][0].transcript; // Get the recognized text
                                                            searchInput.value = transcript; // Set the recognized text to the search input
                                                        });

                                                        // Handle errors during speech recognition
                                                        recognition.addEventListener('error', (event) => {
                                                            console.error('Speech recognition error:', event.error);
                                                            alert('Error occurred while recognizing your speech. Please try again.');
                                                        });

                                                        // Trigger the search button click after speech recognition ends
                                                        recognition.addEventListener('end', () => {
                                                            voiceBtn.classList.remove('active'); // Remove active state
                                                            if (searchInput.value.trim() !== '') {
                                                                searchButton.click(); // Simulate click on the search button
                                                            }
                                                        });
                                                    } else {
                                                        console.warn('Speech Recognition API not supported in this browser.');
                                                    }

                                                    document.getElementById("search-input").addEventListener("input", async function () {
                                                        const query = this.value.trim();
                                                        const suggestionsList = document.getElementById("suggestions");

                                                        // Clear suggestions if the input is erased
                                                        if (query.length === 0) {
                                                            suggestionsList.innerHTML = ""; // Clear the suggestions list
                                                            suggestionsList.style.display = "none"; // Hide the suggestions dropdown
                                                            return; // Stop further processing
                                                        }

                                                        try {
                                                            // Fetch matching items from the server
                                                            const response = await fetch(`/items/autocomplete?keyword=${encodeURIComponent(query)}`);
                                                            const suggestions = await response.json();

                                                            // Populate suggestions dropdown
                                                            suggestionsList.innerHTML = ""; // Clear existing suggestions
                                                            suggestions.forEach(item => {
                                                                const li = document.createElement("li");
                                                                li.className = "list-group-item";
                                                                li.textContent = item.title;

                                                                // On click, set the input value and submit the form
                                                                li.onclick = () => {
                                                                    const searchInput = document.getElementById("search-input");
                                                                    searchInput.value = item.title;
                                                                    suggestionsList.style.display = "none";

                                                                    // Find the form element and submit it
                                                                    const searchForm = searchInput.closest("form");
                                                                    if (searchForm) {
                                                                        searchForm.submit();
                                                                    }
                                                                };

                                                                suggestionsList.appendChild(li);
                                                            });

                                                            suggestionsList.style.display = "block";
                                                        } catch (error) {
                                                            console.error("Error fetching autocomplete suggestions:", error);
                                                        }
                                                    });

                                                    // Hide suggestions on click outside
                                                    document.addEventListener("click", (e) => {
                                                        if (!e.target.closest(".input-group")) {
                                                            document.getElementById("suggestions").style.display = "none";
                                                        }
                                                    });
                                                    document.addEventListener("DOMContentLoaded", function () {
                                                        const placeholderTexts = ["Pizza", "Burger", "Chowmein", "Momos", "Cakes", "Sweets"];
                                                        let index = 0;
                                                        let charIndex = 0;
                                                        let isErasing = false;
                                                        const searchInput = document.getElementById("search-input");

                                                        function typeEffect() {
                                                            const currentText = placeholderTexts[index];

                                                            if (!isErasing) {
                                                                searchInput.setAttribute("placeholder", currentText.substring(0, charIndex + 1));
                                                                charIndex++;

                                                                if (charIndex === currentText.length) {
                                                                    isErasing = true;
                                                                    setTimeout(typeEffect, 3000); // Short pause before erasing
                                                                } else {
                                                                    setTimeout(typeEffect, 100); // Typing speed
                                                                }
                                                            } else {
                                                                searchInput.setAttribute("placeholder", currentText.substring(0, charIndex - 1));
                                                                charIndex--;

                                                                if (charIndex === 0) {
                                                                    isErasing = false;
                                                                    index = (index + 1) % placeholderTexts.length;
                                                                    setTimeout(typeEffect, 500); // Move to next word quickly
                                                                } else {
                                                                    setTimeout(typeEffect, 50); // Faster erasing speed
                                                                }
                                                            }
                                                        }

                                                        typeEffect(); // Start animation
                                                    });

                                                    async function updateCart() {
                                                        const response = await fetch('/cart-data');
                                                        const cartItems = await response.json();

                                                        let cartList = document.getElementById("cart-items");
                                                        if (!cartList) return;

                                                        let totalItems = cartItems.length;
                                                        let totalAmount = cartItems.reduce((sum, item) => sum + item.detail.price*item.quantity, 0);

                                                        cartList.innerHTML = `<p>${totalItems} items</p><p>₹${totalAmount}</p>`;
                                                    }

                                                    // Use requestAnimationFrame for smooth updates
                                                    function updateCartSmoothly() {
                                                        updateCart();
                                                        requestAnimationFrame(() => setTimeout(updateCartSmoothly, 5000));
                                                    }

                                                    // Start the smooth cart update loop
                                                    updateCartSmoothly();


                                                </script>

                                                <script
                                                    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
                                                    integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
                                                    crossorigin="anonymous"></script>
                                                <script src="/js/script.js"></script>
                                                <script src="/js/map.js"></script>
                                                <script src="/js/main.js"></script>
                                                <script>
                                                    let tapCount = 0;
                                                    let timeout;

                                                    document.getElementById("tripleTapHeading").addEventListener("click", function () {
                                                        tapCount++;

                                                        if (tapCount === 5) {
                                                            window.location.href = "/employee/login"; // Replace with your desired URL
                                                            tapCount = 0;
                                                        }

                                                        clearTimeout(timeout);
                                                        timeout = setTimeout(() => {
                                                            tapCount = 0;
                                                        }, 500); // Reset tap count if more than 500ms passes between taps
                                                    });

                                                </script>

</body>

</html>